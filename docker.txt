https://www.youtube.com/watch?v=QF4ZF857m44&t=2050s


Docker -- the story about virtalization.

The main objectives of Docker there is dependencies, deployment, 
   speed creation new project with own dependencies
   
   
Docker -- it's tool for packaging, shipping and launchig application.   

Image -- it's application is ready to running .

Container --  it's running application created from image. (one image to many containers).
			  container does not affect image. 	Only run it.
			  
Image -- layer	cake from application and his dependencies(node, express, db)


DockerHub -- cloud storage of docker images (as Ubuntu, Windows, nodejs, mongodb ...)


CLI Commands

1. List images on my local docker:
	>docker images
2. List running containers on my local docker: (only running)
    >docker ps
   List all containers on my local docker: (ALL)
    >docker ps -a	
3. Create image:
	>docker build -t myapp-img .
	where: -t -- tag (name) image
	
	There is not will be to run without Dockerfile
			
	Dockerfile -- there is set of inctructions about how to build image
	Example: 
	
		FROM node:14.8.0-alpine
		RUN npm install -g npm@6.14.7
		RUN mkdir -p /var/www/gateway
		WORKDIR /var/www/gateway
		ADD . /var/www/gateway
		RUN npm install
		CMD npm run build && npm run start:prod
		
	Where: 	FROM -- base image, 
			RUN  -- command to do something
			WORKDIR -- root catalog for running app
			ADD(COPY) -- copy * from current project location to docker WORKDIR
			CMD(ENTRYPOINT) -- launch application inside docker 
			
	The container is running while the app is running.		

5. Run container
	>docker run --name myapp-container myapp-img
	where: myapp-container is container name, myapp-img is image name
6. Delete container
	>docker rm 	myapp-container(or id)
7. Delete all stopped containers
	docker rm $(docker ps -a -q)	
	where -q options to list only ids
8. Run container in  backround (without output to console)
	>docker run --name myapp-container -d myapp-img	
	-d option
8a. Run container with removing after stopping
	>docker run --name myapp-container -d --rm myapp-img	
	--rm option	
9. Stop container running
	> docker stop myapp-container
9a. Stop all running containers	
	>docker stop $(docker ps -a -q)	
10. Delete all images
	>docker rmi $(docker images -a -q)	
	
	1:01:30
d:\ValProjects\test\nestjs-microservices-example\docker-compose.yml

version: '3'
services:
  gateway:
    build: ./gateway
    restart: always
    hostname: gateway
    env_file:
      - .env
    ports:
      - "8000:8000"
    networks:
      - backend
      - frontend
  task:
    build: ./task
    restart: always
    hostname: task
    env_file:
      - .env
    networks:
      - backend
    links:
      - db
  token:
    build: ./token
    restart: always
    hostname: token
    env_file:
      - .env
    networks:
      - backend
    links:
      - db
  mailer:
    build: ./mailer
    restart: always
    hostname: mailer
    env_file:
      - .env
    networks:
      - backend
  permission:
    build: ./permission
    restart: always
    hostname: permission
    env_file:
      - .env
    networks:
      - backend
  user:
    build: ./user
    restart: always
    hostname: user
    env_file:
      - .env
    networks:
      - backend
    links:
      - mailer
      - db
  db:
    image: 'mongo:3.7'
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - "./db/data/db-files:/data/db"
      - "./db/init/:/docker-entrypoint-initdb.d/"
    ports:
      - 27017:27017
    networks:
      - backend
networks:
  backend:
    driver: bridge
  frontend:
    external:
      name: infrastructure
	


	
	
	